/*
 * Kadaster - BRK-Bevragen API
 *
 * D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie. 
 *
 * The version of the OpenAPI document: 1.3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PerceelHal
    /// </summary>
    [DataContract(Name = "PerceelHal")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(AppartementsrechtHal), "appartementsrecht")]
    [JsonSubtypes.KnownSubType(typeof(PerceelHal), "perceel")]
    public partial class PerceelHal : KadastraalOnroerendeZaakHal, IEquatable<PerceelHal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerceelHal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PerceelHal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PerceelHal" /> class.
        /// </summary>
        /// <param name="indicatieVervallen">indicatieVervallen.</param>
        /// <param name="bijbehorendeAppartementsrechten">bijbehorendeAppartementsrechten.</param>
        /// <param name="begrenzing">begrenzing.</param>
        /// <param name="plaatscoordinaten">plaatscoordinaten.</param>
        /// <param name="kadastraleGrootte">kadastraleGrootte.</param>
        /// <param name="perceelnummerVerschuiving">perceelnummerVerschuiving.</param>
        /// <param name="links">links.</param>
        /// <param name="identificatie">identificatie.</param>
        /// <param name="domein">Het domein waartoe de identificatie behoort. .</param>
        /// <param name="type">type (required) (default to &quot;PerceelHal&quot;).</param>
        /// <param name="kadastraleAanduiding">kadastraleAanduiding.</param>
        /// <param name="koopsom">koopsom.</param>
        /// <param name="toelichtingBewaarder">Toelichtende tekst bij een onroerende zaak van de bewaarder. De bewaarder is iemand die bij het Kadaster werkt. Hij schrijft stukken in in de openbare registers en de basisregistratie Kadaster conform de Kadasterwet. .</param>
        /// <param name="aardCultuurBebouwd">aardCultuurBebouwd.</param>
        /// <param name="aardCultuurOnbebouwd">aardCultuurOnbebouwd.</param>
        /// <param name="adressen">Alle binnenlandse adressen gekoppeld aan deze kadastraal onroerende zaak .</param>
        /// <param name="zakelijkGerechtigdeIdentificaties">Alle personen en rechtspersonen die een zakelijk recht hebben op deze kadastraal onroerende zaak .</param>
        /// <param name="privaatrechtelijkeBeperkingIdentificaties">Alle privaatrechtelijkebeperkingen die rusten op deze kadastraal onroerende zaak .</param>
        /// <param name="hypotheekIdentificaties">Alle hypotheken die rusten op deze kadastraal onroerende zaak .</param>
        /// <param name="beslagIdentificaties">Alle beslagen die rusten op deze kadastraal onroerende zaak .</param>
        /// <param name="isOvergegaanIn">isOvergegaanIn.</param>
        /// <param name="isOntstaanUit">isOntstaanUit.</param>
        /// <param name="isVermeldInStukdeelIdentificaties">isVermeldInStukdeelIdentificaties.</param>
        /// <param name="stukIdentificaties">Identificatie van het stuk. Een stuk is een brondocument dat aanleiding geeft tot een wijziging van de gegevens in een basisregistratie. Dit kan een aangeboden stuk of een kadasterstuk zijn. .</param>
        /// <param name="embedded">embedded.</param>
        public PerceelHal(bool indicatieVervallen = default(bool), AppartementsrechtBasis bijbehorendeAppartementsrechten = default(AppartementsrechtBasis), PolygonGeoJSON begrenzing = default(PolygonGeoJSON), PointGeoJSON plaatscoordinaten = default(PointGeoJSON), TypeOppervlak kadastraleGrootte = default(TypeOppervlak), TypePerceelnummerVerschuiving perceelnummerVerschuiving = default(TypePerceelnummerVerschuiving), PerceelLinks links = default(PerceelLinks), string identificatie = default(string), string domein = default(string), TypeKadastraalOnroerendeZaakEnum type = "PerceelHal", string kadastraleAanduiding = default(string), TypeKoopsom koopsom = default(TypeKoopsom), string toelichtingBewaarder = default(string), Waardelijst aardCultuurBebouwd = default(Waardelijst), Waardelijst aardCultuurOnbebouwd = default(Waardelijst), List<LocatieKadastraalObject> adressen = default(List<LocatieKadastraalObject>), List<string> zakelijkGerechtigdeIdentificaties = default(List<string>), List<string> privaatrechtelijkeBeperkingIdentificaties = default(List<string>), List<string> hypotheekIdentificaties = default(List<string>), List<string> beslagIdentificaties = default(List<string>), Filiatie isOvergegaanIn = default(Filiatie), Filiatie isOntstaanUit = default(Filiatie), List<string> isVermeldInStukdeelIdentificaties = default(List<string>), List<string> stukIdentificaties = default(List<string>), KadastraalOnroerendeZaakEmbedded embedded = default(KadastraalOnroerendeZaakEmbedded)) : base(identificatie, domein, type, kadastraleAanduiding, koopsom, toelichtingBewaarder, aardCultuurBebouwd, aardCultuurOnbebouwd, adressen, zakelijkGerechtigdeIdentificaties, privaatrechtelijkeBeperkingIdentificaties, hypotheekIdentificaties, beslagIdentificaties, isOvergegaanIn, isOntstaanUit, isVermeldInStukdeelIdentificaties, stukIdentificaties, embedded)
        {
            this.IndicatieVervallen = indicatieVervallen;
            this.BijbehorendeAppartementsrechten = bijbehorendeAppartementsrechten;
            this.Begrenzing = begrenzing;
            this.Plaatscoordinaten = plaatscoordinaten;
            this.KadastraleGrootte = kadastraleGrootte;
            this.PerceelnummerVerschuiving = perceelnummerVerschuiving;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets IndicatieVervallen
        /// </summary>
        [DataMember(Name = "indicatieVervallen", EmitDefaultValue = true)]
        public bool IndicatieVervallen { get; set; }

        /// <summary>
        /// Gets or Sets BijbehorendeAppartementsrechten
        /// </summary>
        [DataMember(Name = "bijbehorendeAppartementsrechten", EmitDefaultValue = false)]
        public AppartementsrechtBasis BijbehorendeAppartementsrechten { get; set; }

        /// <summary>
        /// Gets or Sets Begrenzing
        /// </summary>
        [DataMember(Name = "begrenzing", EmitDefaultValue = false)]
        public PolygonGeoJSON Begrenzing { get; set; }

        /// <summary>
        /// Gets or Sets Plaatscoordinaten
        /// </summary>
        [DataMember(Name = "plaatscoordinaten", EmitDefaultValue = false)]
        public PointGeoJSON Plaatscoordinaten { get; set; }

        /// <summary>
        /// Gets or Sets KadastraleGrootte
        /// </summary>
        [DataMember(Name = "kadastraleGrootte", EmitDefaultValue = false)]
        public TypeOppervlak KadastraleGrootte { get; set; }

        /// <summary>
        /// Gets or Sets PerceelnummerVerschuiving
        /// </summary>
        [DataMember(Name = "perceelnummerVerschuiving", EmitDefaultValue = false)]
        public TypePerceelnummerVerschuiving PerceelnummerVerschuiving { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = false)]
        public PerceelLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerceelHal {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  IndicatieVervallen: ").Append(IndicatieVervallen).Append("\n");
            sb.Append("  BijbehorendeAppartementsrechten: ").Append(BijbehorendeAppartementsrechten).Append("\n");
            sb.Append("  Begrenzing: ").Append(Begrenzing).Append("\n");
            sb.Append("  Plaatscoordinaten: ").Append(Plaatscoordinaten).Append("\n");
            sb.Append("  KadastraleGrootte: ").Append(KadastraleGrootte).Append("\n");
            sb.Append("  PerceelnummerVerschuiving: ").Append(PerceelnummerVerschuiving).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PerceelHal);
        }

        /// <summary>
        /// Returns true if PerceelHal instances are equal
        /// </summary>
        /// <param name="input">Instance of PerceelHal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerceelHal input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.IndicatieVervallen == input.IndicatieVervallen ||
                    this.IndicatieVervallen.Equals(input.IndicatieVervallen)
                ) && base.Equals(input) && 
                (
                    this.BijbehorendeAppartementsrechten == input.BijbehorendeAppartementsrechten ||
                    (this.BijbehorendeAppartementsrechten != null &&
                    this.BijbehorendeAppartementsrechten.Equals(input.BijbehorendeAppartementsrechten))
                ) && base.Equals(input) && 
                (
                    this.Begrenzing == input.Begrenzing ||
                    (this.Begrenzing != null &&
                    this.Begrenzing.Equals(input.Begrenzing))
                ) && base.Equals(input) && 
                (
                    this.Plaatscoordinaten == input.Plaatscoordinaten ||
                    (this.Plaatscoordinaten != null &&
                    this.Plaatscoordinaten.Equals(input.Plaatscoordinaten))
                ) && base.Equals(input) && 
                (
                    this.KadastraleGrootte == input.KadastraleGrootte ||
                    (this.KadastraleGrootte != null &&
                    this.KadastraleGrootte.Equals(input.KadastraleGrootte))
                ) && base.Equals(input) && 
                (
                    this.PerceelnummerVerschuiving == input.PerceelnummerVerschuiving ||
                    (this.PerceelnummerVerschuiving != null &&
                    this.PerceelnummerVerschuiving.Equals(input.PerceelnummerVerschuiving))
                ) && base.Equals(input) && 
                (
                    this.Links == input.Links ||
                    (this.Links != null &&
                    this.Links.Equals(input.Links))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = hashCode * 59 + this.IndicatieVervallen.GetHashCode();
                if (this.BijbehorendeAppartementsrechten != null)
                    hashCode = hashCode * 59 + this.BijbehorendeAppartementsrechten.GetHashCode();
                if (this.Begrenzing != null)
                    hashCode = hashCode * 59 + this.Begrenzing.GetHashCode();
                if (this.Plaatscoordinaten != null)
                    hashCode = hashCode * 59 + this.Plaatscoordinaten.GetHashCode();
                if (this.KadastraleGrootte != null)
                    hashCode = hashCode * 59 + this.KadastraleGrootte.GetHashCode();
                if (this.PerceelnummerVerschuiving != null)
                    hashCode = hashCode * 59 + this.PerceelnummerVerschuiving.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

}
