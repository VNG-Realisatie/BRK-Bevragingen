/*
 * Kadaster - BRK-Bevragen API
 *
 * D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie. 
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// KadastraalOnroerendeZaakHal
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "type")]
    [JsonSubtypes.KnownSubType(typeof(AppartementsrechtHal), "AppartementsrechtHal")]
    [JsonSubtypes.KnownSubType(typeof(PerceelHal), "PerceelHal")]
    public partial class KadastraalOnroerendeZaakHal :  IEquatable<KadastraalOnroerendeZaakHal>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeKadastraalOnroerendeZaakEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="KadastraalOnroerendeZaakHal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected KadastraalOnroerendeZaakHal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="KadastraalOnroerendeZaakHal" /> class.
        /// </summary>
        /// <param name="identificatie">identificatie.</param>
        /// <param name="domein">Het domein waartoe de identificatie behoort. .</param>
        /// <param name="type">type (required).</param>
        /// <param name="kadastraleAanduiding">kadastraleAanduiding.</param>
        /// <param name="koopsom">koopsom.</param>
        /// <param name="toelichtingBewaarder">Toelichtende tekst bij een onroerende zaak van de bewaarder. De bewaarder is iemand die bij het Kadaster werkt. Hij schrijft stukken in in de openbare registers en de basisregistratie Kadaster conform de Kadasterwet. .</param>
        /// <param name="aardCultuurBebouwd">aardCultuurBebouwd.</param>
        /// <param name="aardCultuurOnbebouwd">aardCultuurOnbebouwd.</param>
        /// <param name="adressen">Alle binnenlandse adressen gekoppeld aan deze kadastraal onroerende zaak .</param>
        /// <param name="zakelijkGerechtigdeIdentificaties">Alle personen en rechtspersonen die een zakelijk recht hebben op deze kadastraal onroerende zaak .</param>
        /// <param name="privaatrechtelijkeBeperkingIdentificaties">Alle privaatrechtelijkebeperkingen die rusten op deze kadastraal onroerende zaak .</param>
        /// <param name="hypotheekIdentificaties">Alle hypotheken die rusten op deze kadastraal onroerende zaak .</param>
        /// <param name="beslagIdentificaties">Alle beslagen die rusten op deze kadastraal onroerende zaak .</param>
        /// <param name="isOvergegaanIn">isOvergegaanIn.</param>
        /// <param name="isOntstaanUit">isOntstaanUit.</param>
        /// <param name="isVermeldInStukdeelIdentificaties">isVermeldInStukdeelIdentificaties.</param>
        /// <param name="stukIdentificaties">Identificatie van het stuk. Een stuk is een brondocument dat aanleiding geeft tot een wijziging van de gegevens in een basisregistratie. Dit kan een aangeboden stuk of een kadasterstuk zijn. .</param>
        /// <param name="embedded">embedded.</param>
        public KadastraalOnroerendeZaakHal(string identificatie = default(string), string domein = default(string), TypeKadastraalOnroerendeZaakEnum type = default(TypeKadastraalOnroerendeZaakEnum), string kadastraleAanduiding = default(string), TypeKoopsom koopsom = default(TypeKoopsom), string toelichtingBewaarder = default(string), Waardelijst aardCultuurBebouwd = default(Waardelijst), Waardelijst aardCultuurOnbebouwd = default(Waardelijst), List<LocatieKadastraalObject> adressen = default(List<LocatieKadastraalObject>), List<string> zakelijkGerechtigdeIdentificaties = default(List<string>), List<string> privaatrechtelijkeBeperkingIdentificaties = default(List<string>), List<string> hypotheekIdentificaties = default(List<string>), List<string> beslagIdentificaties = default(List<string>), Filiatie isOvergegaanIn = default(Filiatie), Filiatie isOntstaanUit = default(Filiatie), List<string> isVermeldInStukdeelIdentificaties = default(List<string>), List<string> stukIdentificaties = default(List<string>), KadastraalOnroerendeZaakEmbedded embedded = default(KadastraalOnroerendeZaakEmbedded))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for KadastraalOnroerendeZaakHal and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            this.Identificatie = identificatie;
            this.Domein = domein;
            this.KadastraleAanduiding = kadastraleAanduiding;
            this.Koopsom = koopsom;
            this.ToelichtingBewaarder = toelichtingBewaarder;
            this.AardCultuurBebouwd = aardCultuurBebouwd;
            this.AardCultuurOnbebouwd = aardCultuurOnbebouwd;
            this.Adressen = adressen;
            this.ZakelijkGerechtigdeIdentificaties = zakelijkGerechtigdeIdentificaties;
            this.PrivaatrechtelijkeBeperkingIdentificaties = privaatrechtelijkeBeperkingIdentificaties;
            this.HypotheekIdentificaties = hypotheekIdentificaties;
            this.BeslagIdentificaties = beslagIdentificaties;
            this.IsOvergegaanIn = isOvergegaanIn;
            this.IsOntstaanUit = isOntstaanUit;
            this.IsVermeldInStukdeelIdentificaties = isVermeldInStukdeelIdentificaties;
            this.StukIdentificaties = stukIdentificaties;
            this.Embedded = embedded;
        }

        /// <summary>
        /// Gets or Sets Identificatie
        /// </summary>
        [DataMember(Name="identificatie", EmitDefaultValue=false)]
        public string Identificatie { get; set; }

        /// <summary>
        /// Het domein waartoe de identificatie behoort. 
        /// </summary>
        /// <value>Het domein waartoe de identificatie behoort. </value>
        [DataMember(Name="domein", EmitDefaultValue=false)]
        public string Domein { get; set; }


        /// <summary>
        /// Gets or Sets KadastraleAanduiding
        /// </summary>
        [DataMember(Name="kadastraleAanduiding", EmitDefaultValue=false)]
        public string KadastraleAanduiding { get; set; }

        /// <summary>
        /// Gets or Sets Koopsom
        /// </summary>
        [DataMember(Name="koopsom", EmitDefaultValue=false)]
        public TypeKoopsom Koopsom { get; set; }

        /// <summary>
        /// Toelichtende tekst bij een onroerende zaak van de bewaarder. De bewaarder is iemand die bij het Kadaster werkt. Hij schrijft stukken in in de openbare registers en de basisregistratie Kadaster conform de Kadasterwet. 
        /// </summary>
        /// <value>Toelichtende tekst bij een onroerende zaak van de bewaarder. De bewaarder is iemand die bij het Kadaster werkt. Hij schrijft stukken in in de openbare registers en de basisregistratie Kadaster conform de Kadasterwet. </value>
        [DataMember(Name="toelichtingBewaarder", EmitDefaultValue=false)]
        public string ToelichtingBewaarder { get; set; }

        /// <summary>
        /// Gets or Sets AardCultuurBebouwd
        /// </summary>
        [DataMember(Name="aardCultuurBebouwd", EmitDefaultValue=false)]
        public Waardelijst AardCultuurBebouwd { get; set; }

        /// <summary>
        /// Gets or Sets AardCultuurOnbebouwd
        /// </summary>
        [DataMember(Name="aardCultuurOnbebouwd", EmitDefaultValue=false)]
        public Waardelijst AardCultuurOnbebouwd { get; set; }

        /// <summary>
        /// Alle binnenlandse adressen gekoppeld aan deze kadastraal onroerende zaak 
        /// </summary>
        /// <value>Alle binnenlandse adressen gekoppeld aan deze kadastraal onroerende zaak </value>
        [DataMember(Name="adressen", EmitDefaultValue=false)]
        public List<LocatieKadastraalObject> Adressen { get; set; }

        /// <summary>
        /// Alle personen en rechtspersonen die een zakelijk recht hebben op deze kadastraal onroerende zaak 
        /// </summary>
        /// <value>Alle personen en rechtspersonen die een zakelijk recht hebben op deze kadastraal onroerende zaak </value>
        [DataMember(Name="zakelijkGerechtigdeIdentificaties", EmitDefaultValue=false)]
        public List<string> ZakelijkGerechtigdeIdentificaties { get; set; }

        /// <summary>
        /// Alle privaatrechtelijkebeperkingen die rusten op deze kadastraal onroerende zaak 
        /// </summary>
        /// <value>Alle privaatrechtelijkebeperkingen die rusten op deze kadastraal onroerende zaak </value>
        [DataMember(Name="privaatrechtelijkeBeperkingIdentificaties", EmitDefaultValue=false)]
        public List<string> PrivaatrechtelijkeBeperkingIdentificaties { get; set; }

        /// <summary>
        /// Alle hypotheken die rusten op deze kadastraal onroerende zaak 
        /// </summary>
        /// <value>Alle hypotheken die rusten op deze kadastraal onroerende zaak </value>
        [DataMember(Name="hypotheekIdentificaties", EmitDefaultValue=false)]
        public List<string> HypotheekIdentificaties { get; set; }

        /// <summary>
        /// Alle beslagen die rusten op deze kadastraal onroerende zaak 
        /// </summary>
        /// <value>Alle beslagen die rusten op deze kadastraal onroerende zaak </value>
        [DataMember(Name="beslagIdentificaties", EmitDefaultValue=false)]
        public List<string> BeslagIdentificaties { get; set; }

        /// <summary>
        /// Gets or Sets IsOvergegaanIn
        /// </summary>
        [DataMember(Name="isOvergegaanIn", EmitDefaultValue=false)]
        public Filiatie IsOvergegaanIn { get; set; }

        /// <summary>
        /// Gets or Sets IsOntstaanUit
        /// </summary>
        [DataMember(Name="isOntstaanUit", EmitDefaultValue=false)]
        public Filiatie IsOntstaanUit { get; set; }

        /// <summary>
        /// Gets or Sets IsVermeldInStukdeelIdentificaties
        /// </summary>
        [DataMember(Name="isVermeldInStukdeelIdentificaties", EmitDefaultValue=false)]
        public List<string> IsVermeldInStukdeelIdentificaties { get; set; }

        /// <summary>
        /// Identificatie van het stuk. Een stuk is een brondocument dat aanleiding geeft tot een wijziging van de gegevens in een basisregistratie. Dit kan een aangeboden stuk of een kadasterstuk zijn. 
        /// </summary>
        /// <value>Identificatie van het stuk. Een stuk is een brondocument dat aanleiding geeft tot een wijziging van de gegevens in een basisregistratie. Dit kan een aangeboden stuk of een kadasterstuk zijn. </value>
        [DataMember(Name="stukIdentificaties", EmitDefaultValue=false)]
        public List<string> StukIdentificaties { get; set; }

        /// <summary>
        /// Gets or Sets Embedded
        /// </summary>
        [DataMember(Name="_embedded", EmitDefaultValue=false)]
        public KadastraalOnroerendeZaakEmbedded Embedded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KadastraalOnroerendeZaakHal {\n");
            sb.Append("  Identificatie: ").Append(Identificatie).Append("\n");
            sb.Append("  Domein: ").Append(Domein).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  KadastraleAanduiding: ").Append(KadastraleAanduiding).Append("\n");
            sb.Append("  Koopsom: ").Append(Koopsom).Append("\n");
            sb.Append("  ToelichtingBewaarder: ").Append(ToelichtingBewaarder).Append("\n");
            sb.Append("  AardCultuurBebouwd: ").Append(AardCultuurBebouwd).Append("\n");
            sb.Append("  AardCultuurOnbebouwd: ").Append(AardCultuurOnbebouwd).Append("\n");
            sb.Append("  Adressen: ").Append(Adressen).Append("\n");
            sb.Append("  ZakelijkGerechtigdeIdentificaties: ").Append(ZakelijkGerechtigdeIdentificaties).Append("\n");
            sb.Append("  PrivaatrechtelijkeBeperkingIdentificaties: ").Append(PrivaatrechtelijkeBeperkingIdentificaties).Append("\n");
            sb.Append("  HypotheekIdentificaties: ").Append(HypotheekIdentificaties).Append("\n");
            sb.Append("  BeslagIdentificaties: ").Append(BeslagIdentificaties).Append("\n");
            sb.Append("  IsOvergegaanIn: ").Append(IsOvergegaanIn).Append("\n");
            sb.Append("  IsOntstaanUit: ").Append(IsOntstaanUit).Append("\n");
            sb.Append("  IsVermeldInStukdeelIdentificaties: ").Append(IsVermeldInStukdeelIdentificaties).Append("\n");
            sb.Append("  StukIdentificaties: ").Append(StukIdentificaties).Append("\n");
            sb.Append("  Embedded: ").Append(Embedded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KadastraalOnroerendeZaakHal);
        }

        /// <summary>
        /// Returns true if KadastraalOnroerendeZaakHal instances are equal
        /// </summary>
        /// <param name="input">Instance of KadastraalOnroerendeZaakHal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KadastraalOnroerendeZaakHal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Identificatie == input.Identificatie ||
                    (this.Identificatie != null &&
                    this.Identificatie.Equals(input.Identificatie))
                ) && 
                (
                    this.Domein == input.Domein ||
                    (this.Domein != null &&
                    this.Domein.Equals(input.Domein))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.KadastraleAanduiding == input.KadastraleAanduiding ||
                    (this.KadastraleAanduiding != null &&
                    this.KadastraleAanduiding.Equals(input.KadastraleAanduiding))
                ) && 
                (
                    this.Koopsom == input.Koopsom ||
                    (this.Koopsom != null &&
                    this.Koopsom.Equals(input.Koopsom))
                ) && 
                (
                    this.ToelichtingBewaarder == input.ToelichtingBewaarder ||
                    (this.ToelichtingBewaarder != null &&
                    this.ToelichtingBewaarder.Equals(input.ToelichtingBewaarder))
                ) && 
                (
                    this.AardCultuurBebouwd == input.AardCultuurBebouwd ||
                    (this.AardCultuurBebouwd != null &&
                    this.AardCultuurBebouwd.Equals(input.AardCultuurBebouwd))
                ) && 
                (
                    this.AardCultuurOnbebouwd == input.AardCultuurOnbebouwd ||
                    (this.AardCultuurOnbebouwd != null &&
                    this.AardCultuurOnbebouwd.Equals(input.AardCultuurOnbebouwd))
                ) && 
                (
                    this.Adressen == input.Adressen ||
                    this.Adressen != null &&
                    input.Adressen != null &&
                    this.Adressen.SequenceEqual(input.Adressen)
                ) && 
                (
                    this.ZakelijkGerechtigdeIdentificaties == input.ZakelijkGerechtigdeIdentificaties ||
                    this.ZakelijkGerechtigdeIdentificaties != null &&
                    input.ZakelijkGerechtigdeIdentificaties != null &&
                    this.ZakelijkGerechtigdeIdentificaties.SequenceEqual(input.ZakelijkGerechtigdeIdentificaties)
                ) && 
                (
                    this.PrivaatrechtelijkeBeperkingIdentificaties == input.PrivaatrechtelijkeBeperkingIdentificaties ||
                    this.PrivaatrechtelijkeBeperkingIdentificaties != null &&
                    input.PrivaatrechtelijkeBeperkingIdentificaties != null &&
                    this.PrivaatrechtelijkeBeperkingIdentificaties.SequenceEqual(input.PrivaatrechtelijkeBeperkingIdentificaties)
                ) && 
                (
                    this.HypotheekIdentificaties == input.HypotheekIdentificaties ||
                    this.HypotheekIdentificaties != null &&
                    input.HypotheekIdentificaties != null &&
                    this.HypotheekIdentificaties.SequenceEqual(input.HypotheekIdentificaties)
                ) && 
                (
                    this.BeslagIdentificaties == input.BeslagIdentificaties ||
                    this.BeslagIdentificaties != null &&
                    input.BeslagIdentificaties != null &&
                    this.BeslagIdentificaties.SequenceEqual(input.BeslagIdentificaties)
                ) && 
                (
                    this.IsOvergegaanIn == input.IsOvergegaanIn ||
                    (this.IsOvergegaanIn != null &&
                    this.IsOvergegaanIn.Equals(input.IsOvergegaanIn))
                ) && 
                (
                    this.IsOntstaanUit == input.IsOntstaanUit ||
                    (this.IsOntstaanUit != null &&
                    this.IsOntstaanUit.Equals(input.IsOntstaanUit))
                ) && 
                (
                    this.IsVermeldInStukdeelIdentificaties == input.IsVermeldInStukdeelIdentificaties ||
                    this.IsVermeldInStukdeelIdentificaties != null &&
                    input.IsVermeldInStukdeelIdentificaties != null &&
                    this.IsVermeldInStukdeelIdentificaties.SequenceEqual(input.IsVermeldInStukdeelIdentificaties)
                ) && 
                (
                    this.StukIdentificaties == input.StukIdentificaties ||
                    this.StukIdentificaties != null &&
                    input.StukIdentificaties != null &&
                    this.StukIdentificaties.SequenceEqual(input.StukIdentificaties)
                ) && 
                (
                    this.Embedded == input.Embedded ||
                    (this.Embedded != null &&
                    this.Embedded.Equals(input.Embedded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Identificatie != null)
                    hashCode = hashCode * 59 + this.Identificatie.GetHashCode();
                if (this.Domein != null)
                    hashCode = hashCode * 59 + this.Domein.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.KadastraleAanduiding != null)
                    hashCode = hashCode * 59 + this.KadastraleAanduiding.GetHashCode();
                if (this.Koopsom != null)
                    hashCode = hashCode * 59 + this.Koopsom.GetHashCode();
                if (this.ToelichtingBewaarder != null)
                    hashCode = hashCode * 59 + this.ToelichtingBewaarder.GetHashCode();
                if (this.AardCultuurBebouwd != null)
                    hashCode = hashCode * 59 + this.AardCultuurBebouwd.GetHashCode();
                if (this.AardCultuurOnbebouwd != null)
                    hashCode = hashCode * 59 + this.AardCultuurOnbebouwd.GetHashCode();
                if (this.Adressen != null)
                    hashCode = hashCode * 59 + this.Adressen.GetHashCode();
                if (this.ZakelijkGerechtigdeIdentificaties != null)
                    hashCode = hashCode * 59 + this.ZakelijkGerechtigdeIdentificaties.GetHashCode();
                if (this.PrivaatrechtelijkeBeperkingIdentificaties != null)
                    hashCode = hashCode * 59 + this.PrivaatrechtelijkeBeperkingIdentificaties.GetHashCode();
                if (this.HypotheekIdentificaties != null)
                    hashCode = hashCode * 59 + this.HypotheekIdentificaties.GetHashCode();
                if (this.BeslagIdentificaties != null)
                    hashCode = hashCode * 59 + this.BeslagIdentificaties.GetHashCode();
                if (this.IsOvergegaanIn != null)
                    hashCode = hashCode * 59 + this.IsOvergegaanIn.GetHashCode();
                if (this.IsOntstaanUit != null)
                    hashCode = hashCode * 59 + this.IsOntstaanUit.GetHashCode();
                if (this.IsVermeldInStukdeelIdentificaties != null)
                    hashCode = hashCode * 59 + this.IsVermeldInStukdeelIdentificaties.GetHashCode();
                if (this.StukIdentificaties != null)
                    hashCode = hashCode * 59 + this.StukIdentificaties.GetHashCode();
                if (this.Embedded != null)
                    hashCode = hashCode * 59 + this.Embedded.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
